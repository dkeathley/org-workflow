* Changes and Notes
** 231019 -- Improved multiple hyphens in naming

Added routine to remove multiple hyphens through regexp replace.

** 230918 -- Improved auto-naming of directories

Directory name suggestions now auto-generate from the title (replacing spaces with hyphens).

Have also improved the change-directory function so that the date and proj-type are automatically conserved.  The user just tweaks the name.

This has really sped things up when taking notes and adding attachments.  
** 211213a -- Improved Readme
** 211213 -- Changed macro to =org-workflow-change-project-directory=

This used to be called =org-workflow-rename-project-directory=. I didn't like the warning message as it was too long and complex.  Now it simply notes that the files in the attachment folder will be moved, and prompts the user to proceed or cancel.  If the user cancels, the operation is not performed and the files aren't moved.

This way, the user can manually adjust the file contents if absolutely not desired to move before triggering the command again.  

** 210910 -- Updated change directory/convert-to-project commands

Today I finished implementing the updating of the convert-to-project command, and added a convenience function that also calls this command for renaming the project directory (essentially the same action).

What this does is to rename the directory property DIR to a new user specified name (for instance if the user does not like the current name for some reason or it adds confusion).

Beyond this, it also lets the user choose whether or not to move the existing directory on disk to the newly named directory.  This is very helpful as it preserves links that are existing.

I really don't know when a person would not want to do this.  I'm leaving it as a prompt for now, but perhaps it should just default to moving the directory on disk whenever the directory property is changed... Will have to just use it for a while and see what I feel like after some experience.  

** 210818 -- Org-workflow Project Attachments

210818 Update: Have since found org-attach which is already built into org and does basically everything I was thinking of here :-).  

Think I have the way to do this.   

Can basically have each project have a unique tag.  

Then, when using org-download it can search back to find the level of the project.  

This would work if totally consistent.  However, it might run into issues when someone just adds their own project entry that is not tagged properly.   

Will have to think some more about this.  

** Usage .gif files

Thinking through what steps would be useful to demo:

 1. Move project up to stage one level up/down
 2. Move project to top/bottom of the current list of projects
 3. Create a new project
 4. Attaching files
    1. Demonstrate naming conventions
    2. Demonstrate usage of =PROJ-TYPE= property
* Tasks
** TODO Improve and add examples to readme

For instance, need to show complete proecess in one take from the creation of the workflow heading, addition of PROJ-TYPE property, etc...

I think a YOUTUBE video might be best for this.  

** DONE Provide a way to rename the attachment folder
CLOSED: [2021-09-10 Fri 14:38]

Currently it assumes the attachment folder is permanently named after initial generation.  This might not always be preferred.  For instance, if you want to move it around to another workflow.

Could add a convenience function that rejects the current =PROJ-TYPE= property and uses that to rename any existing project folder if it already exists as well as the =DIR= property of the current project at point.

If the =DIR= property has not been set yet, then you would simply tell the user that and request that they use =org-workflow-convert-to-project=.  If there is no =DIR= then either it has never been made into a proper project, or some error occurred.

Note that existing infrastructure seems to exist for this inside of org-attach.  It is tempting to just let that handle this as an option.  Will have to see how it works.

In the end, I think we would want to do this ourselves.  The flow should be as follows:

 1. There is no local directory set.  This is easy -- just set it with a new one!
 2. There is a local directory property set. Now we want to flash a warning to the user telling them that there is one set, and providing the location.  The user should then answer Y or N to whether they want to move that existing directory to a new one that they will define.
    1. Y: Move the directory to newly defined one
    2. N: Set the new directory leaving the old one in place

I think this is the most conservative approach, and would not risk losing any data on the users part.  So long as the messages infrastructure is used, it will also have a log during the session of what was done so the user could trace it back.

The bottom line is that this is supposed to warn the user that there is potentially an issue and they can dig down the details of edge cases and correct them during the session.

This should be done during the conversion of a headline to a project.  A standalone function should also be made to rename a directory if that is all the user wants to do.

Essentially -- there will be one function for converting to a project, and then an overloaded function that is called "rename-directory" or "reconfigure-project" that would essentially do the same thing, but just have a different name for user convenience. I think this is the best way to go here!

** DONE Create .gif files providing usage instructions for org-workflow.
CLOSED: [2021-09-08 Wed 07:48]

I might consider making new ones that are a bit improved, but the ones there now are pretty good.  

